version: '2'
services:

  dockerhost:
    image: qoomon/docker-host
    cap_add: [ 'NET_ADMIN', 'NET_RAW' ]
    mem_limit: 4M
    restart: on-failure
  dummy:
    image: bash
    command: ["ping" , "dockerhost"]

  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper-1
    ports:
      - "12181:12181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 12181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:22888:23888;zookeeper-2:32888:33888;zookeeper-3:42888:43888

  zookeeper-2:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper-2
    ports:
      - "22181:22181"
    depends_on:
      - zookeeper-1
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 22181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:22888:23888;zookeeper-2:32888:33888;zookeeper-3:42888:43888

  zookeeper-3:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper-3
    ports:
      - "32181:32181"
    depends_on:
      - zookeeper-2
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:22888:23888;zookeeper-2:32888:33888;zookeeper-3:42888:43888

  kafka-1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-1
    ports:
      - "19092:19092"
      - "18778:18778"
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    volumes:
      - ../jolokia:/opt/jolokia
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:12181,zookeeper-2:22181,zookeeper-3:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:19092
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=18778,host=0.0.0.0"
      JMX_PORT: "9999"
 
  kafka-2:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-2
    ports:
      - "29092:29092"
      - "28778:28778"
    depends_on:
      - kafka-1
    volumes:
      - ../jolokia:/opt/jolokia
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:12181,zookeeper-2:22181,zookeeper-3:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:29092
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=28778,host=0.0.0.0"
      JMX_PORT: "9999"
 
  kafka-3:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-3
    ports:
      - "39092:39092"
      - "38778:38778"
    depends_on:
      - kafka-1
      - kafka-2
    volumes:
      - ../jolokia:/opt/jolokia
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:12181,zookeeper-2:22181,zookeeper-3:32181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:39092
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=38778,host=0.0.0.0"
      JMX_PORT: "9999"

  kafka-connect-1:
    image: confluentinc/cp-kafka-connect:latest
    hostname: kafka-connect-1
    ports:
      - "18082:18082"
      - "18779:18779"
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
      - kafka-1
      - kafka-2
      - kafka-3
    volumes:
      - ../jolokia:/opt/jolokia
      - ../splunk-kafka-connect:/etc/kafka-connect/jars/splunk-kafka-connect
      - ../kafka-connect-datagen/confluentinc-kafka-connect-datagen-0.1.0:/etc/kafka-connect/jars/confluentinc-kafka-connect-datagen
      - ../kafka-connect:/etc/kafka-connect/config
    environment:
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=18779,host=0.0.0.0"
    command: "/usr/bin/connect-distributed /etc/kafka-connect/config/connect-distributed.properties-kafka-connect-1"

  kafka-connect-2:
    image: confluentinc/cp-kafka-connect:latest
    hostname: kafka-connect-2
    ports:
      - "28082:28082"
      - "28779:28779"
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
      - kafka-1
      - kafka-2
      - kafka-3
    volumes:
      - ../jolokia:/opt/jolokia
      - ../splunk-kafka-connect:/etc/kafka-connect/jars/splunk-kafka-connect
      - ../kafka-connect-datagen/confluentinc-kafka-connect-datagen-0.1.0:/etc/kafka-connect/jars/confluentinc-kafka-connect-datagen
      - ../kafka-connect:/etc/kafka-connect/config
    environment:
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=28779,host=0.0.0.0"
    command: "/usr/bin/connect-distributed /etc/kafka-connect/config/connect-distributed.properties-kafka-connect-2"

  kafka-connect-3:
    image: confluentinc/cp-kafka-connect:latest
    hostname: kafka-connect-3
    ports:
      - "38082:38082"
      - "38779:38779"
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
      - kafka-1
      - kafka-2
      - kafka-3
    volumes:
      - ../jolokia:/opt/jolokia
      - ../splunk-kafka-connect:/etc/kafka-connect/jars/splunk-kafka-connect
      - ../kafka-connect-datagen/confluentinc-kafka-connect-datagen-0.1.0:/etc/kafka-connect/jars/confluentinc-kafka-connect-datagen
      - ../kafka-connect:/etc/kafka-connect/config
    environment:
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=38779,host=0.0.0.0"
    command: "/usr/bin/connect-distributed /etc/kafka-connect/config/connect-distributed.properties-kafka-connect-3"

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    ports:
      - "18081:18081"
      - "18783:18783"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    volumes:
      - ../jolokia:/opt/jolokia
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka-1:19092,PLAINTEXT://kafka-2:29092,PLAINTEXT://kafka-3:39092"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:18081"
      SCHEMA_REGISTRY_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=18783,host=0.0.0.0"

  telegraf-kafka-brokers:
    image: telegraf:latest
    restart: always
    environment:
      HOST_PROC: /rootfs/proc
      HOST_SYS: /rootfs/sys
      HOST_ETC: /rootfs/etc
    hostname: telegraf-kafka-brokers
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
      - kafka-1
      - kafka-2
      - kafka-3
    volumes:
      - ../telegraf/telegraf-kafka-brokers-dockerhost.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro

  telegraf-kafka-connect:
    image: telegraf:latest
    restart: always
    environment:
      HOST_PROC: /rootfs/proc
      HOST_SYS: /rootfs/sys
      HOST_ETC: /rootfs/etc
    hostname: telegraf-kafka-connect
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
      - kafka-1
      - kafka-2
      - kafka-3
    volumes:
      - ../telegraf/telegraf-kafka-connect-dockerhost.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro

  telegraf-kafka-schema-registry:
    image: telegraf:latest
    restart: always
    environment:
      HOST_PROC: /rootfs/proc
      HOST_SYS: /rootfs/sys
      HOST_ETC: /rootfs/etc
    hostname: telegraf-kafka-schema-registry
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
      - kafka-1
      - kafka-2
      - kafka-3
    volumes:
      - ../telegraf/telegraf-kafka-schema-registry-dockerhost.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro

  telegraf-kafka-monitor:
    image: telegraf:latest
    restart: always
    environment:
      HOST_PROC: /rootfs/proc
      HOST_SYS: /rootfs/sys
      HOST_ETC: /rootfs/etc
    hostname: telegraf-kafka-monitor
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
      - kafka-1
      - kafka-2
      - kafka-3
    volumes:
      - ../telegraf/telegraf-kafka-monitor-dockerhost.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro

  kafka-monitor:
    image: guilhemmarchand/kafka-monitor:latest
    hostname: kafka-monitor
    ports:
      - "18884:8778"
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
      - kafka-1
      - kafka-2
      - kafka-3
    volumes:
      - ../kafka-monitor:/usr/local/share/kafka-monitor
    command: "/opt/kafka-monitor/bin/kafka-monitor-start.sh /usr/local/share/kafka-monitor/kafka-monitor.properties"

  # This "container" is a workaround to pre-create topics for the Kafka Music application
  # until we have a more elegant way to do that.
  kafka-create-topics:
    image: confluentinc/cp-kafka:5.1.0
    depends_on:
      - kafka-1
    hostname: kafka-create-topics
    # We defined a dependency on "kafka", but `depends_on` will NOT wait for the
    # dependencies to be "ready" before starting the "kafka-create-topics"
    # container;  it waits only until the dependencies have started.  Hence we
    # must control startup order more explicitly.
    # See https://docs.docker.com/compose/startup-order/
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka-1:19092 1 20 && \
                       kafka-topics --create --topic play-events --if-not-exists --zookeeper zookeeper-1:12181 --partitions 4 --replication-factor 1 && \
                       kafka-topics --create --topic song-feed --if-not-exists --zookeeper zookeeper-1:12181 --partitions 4 --replication-factor 1 && \
                       sleep infinity'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  # Continuously generates input data for the Kafka Music application.
  kafka-music-data-generator:
    image: confluentinc/kafka-streams-examples:5.0.0
    hostname: kafka-music-data-generator
    depends_on:
      - kafka-1
      - kafka-create-topics
    # Control startup order similarly to the "kafka-create-topics" container above.
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka-1:19092 1 20 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 18081 20 && \
                       java -cp /usr/share/java/kafka-streams-examples/kafka-streams-examples-5.0.0-standalone.jar \
                       io.confluent.examples.streams.interactivequeries.kafkamusic.KafkaMusicExampleDriver \
                       kafka-1:19092 http://schema-registry:18081'"
    environment:
      STREAMS_BOOTSTRAP_SERVERS: ignored
      STREAMS_SCHEMA_REGISTRY_HOST: ignored
      STREAMS_SCHEMA_REGISTRY_PORT: ignored
      KAFKA_MUSIC_APP_REST_HOST: ignored
      KAFKA_MUSIC_APP_REST_PORT: ignored

  # Runs the Kafka Music application.
  kafka-music-application:
    image: confluentinc/kafka-streams-examples:5.0.0
    hostname: kafka-music-application
    depends_on:
      - kafka-1
      - schema-registry
      - kafka-create-topics
    volumes:
      - ../jolokia:/opt/jolokia
      - ../kafka-streams:/opt/kafka-streams
    # Control startup order similarly to the "kafka-create-topics" container above.
    # Note: The container's `run` script will perform the same readiness checks
    # for Kafka and Confluent Schema Registry, but that's ok because they complete fast.
    # The reason we check for readiness here is that we can insert a sleep time
    # for topic creation before we start the application.
    #
    # TODO: Once https://issues.apache.org/jira/browse/KAFKA-5037 is resolved,
    #       we can remove this `command` and use the image as-is.
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka-1:19092 1 20 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 18081 20 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 2 && \
                       /etc/confluent/docker/run'"
    ports:
      - '7070:7070'
    environment:
      KAFKA_OPTS: "-javaagent:/opt/jolokia/jolokia-jvm-1.6.0-agent.jar=port=8778,host=0.0.0.0"
      STREAMS_BOOTSTRAP_SERVERS: kafka-1:19092
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 18081
      KAFKA_MUSIC_APP_REST_HOST: localhost
      KAFKA_MUSIC_APP_REST_PORT: 7070

  kafka-manager:
    image: kafkamanager/kafka-manager:latest
    hostname: kafka-manager
    ports:
      - "9000:9000"
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    environment:
      ZK_HOSTS: "zookeeper-1:12181,zookeeper-2:22181,zookeeper-3:32181"
      KAFKA_MANAGER_AUTH_ENABLED: "true"
      KAFKA_MANAGER_USERNAME: "admin"
      KAFKA_MANAGER_PASSWORD: "ch@ngeM3"

